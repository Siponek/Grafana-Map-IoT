[
    {
        "id": "6602f449400436fd",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "64ce07a9bb65dd84",
        "type": "mqtt-broker",
        "name": "mqtt-receive",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "0f36a9b12888f36c",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "transportMonitoringDB",
        "name": "",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://influx:8086",
        "timeout": "",
        "rejectUnauthorized": false
    },
    {
        "id": "e467286949faab53",
        "type": "inject",
        "z": "6602f449400436fd",
        "name": "start-simulation",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "localization",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 220,
        "wires": [
            [
                "fd1b8edd4c9eebf2"
            ]
        ]
    },
    {
        "id": "89e70af7b2a535b9",
        "type": "aedes broker",
        "z": "6602f449400436fd",
        "name": "",
        "mqtt_port": 1883,
        "mqtt_ws_bind": "port",
        "mqtt_ws_port": null,
        "mqtt_ws_path": "",
        "cert": "",
        "key": "",
        "certname": "",
        "keyname": "",
        "persistence_bind": "memory",
        "dburl": "",
        "usetls": false,
        "x": 170,
        "y": 140,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "d0766993b9262b73",
        "type": "mqtt in",
        "z": "6602f449400436fd",
        "name": "",
        "topic": "/geo/position",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "64ce07a9bb65dd84",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 158.18182373046875,
        "y": 498.1817855834961,
        "wires": [
            [
                "0e541c3ec45af020"
            ]
        ]
    },
    {
        "id": "d009813fa71db47f",
        "type": "mqtt out",
        "z": "6602f449400436fd",
        "name": "",
        "topic": "/geo/position",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "64ce07a9bb65dd84",
        "x": 750,
        "y": 420,
        "wires": []
    },
    {
        "id": "b0d83d9d9a877521",
        "type": "function",
        "z": "6602f449400436fd",
        "name": "read-coordinates",
        "func": "// Assuming msg.payload contains the parsed JSON data\nconst elements = msg.payload.elements;\nconst points = elements\n  // Ensure element is a node with lat/lon\n  .filter(el => el.type === \"node\" && el.lat && el.lon && el.tags == undefined)\n  // Map to lat/lon objects\n  .map(node => ({lat: node.lat, lon: node.lon, id: node.id}));\n\n// Replace the payload with points array\nmsg.payload = points;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "// Code added here will be run when the\n// node is being stopped or re-deployed.\nconsole.log(\"random-locations: The node shuts off\")",
        "libs": [],
        "x": 170,
        "y": 420,
        "wires": [
            [
                "67b5705ef4b89a10"
            ]
        ]
    },
    {
        "id": "0e541c3ec45af020",
        "type": "influxdb out",
        "z": "6602f449400436fd",
        "influxdb": "0f36a9b12888f36c",
        "name": "influxdb-out",
        "measurement": "geolocation",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "s",
        "retentionPolicyV18Flux": "",
        "org": "myorg",
        "bucket": "mybucket",
        "x": 338.18182373046875,
        "y": 498.1817855834961,
        "wires": []
    },
    {
        "id": "8231fb91147a531e",
        "type": "json",
        "z": "6602f449400436fd",
        "name": "convert-to-json",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 560,
        "y": 280,
        "wires": [
            [
                "b0d83d9d9a877521"
            ]
        ]
    },
    {
        "id": "fd1b8edd4c9eebf2",
        "type": "file in",
        "z": "6602f449400436fd",
        "name": "",
        "filename": "/data/corsa_italia.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": true,
        "x": 180,
        "y": 280,
        "wires": [
            [
                "8231fb91147a531e"
            ]
        ]
    },
    {
        "id": "b072eeac4d9fa0c7",
        "type": "debug",
        "z": "6602f449400436fd",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 360,
        "wires": []
    },
    {
        "id": "67b5705ef4b89a10",
        "type": "split",
        "z": "6602f449400436fd",
        "name": "split-nodes",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": true,
        "addname": "",
        "x": 370,
        "y": 420,
        "wires": [
            [
                "fc433a97313825ef"
            ]
        ]
    },
    {
        "id": "fc433a97313825ef",
        "type": "delay",
        "z": "6602f449400436fd",
        "name": "",
        "pauseType": "rate",
        "timeout": "4",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 550,
        "y": 420,
        "wires": [
            [
                "d009813fa71db47f",
                "b072eeac4d9fa0c7"
            ]
        ]
    }
]